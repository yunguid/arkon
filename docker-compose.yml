version: '3.9'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: arkon-financial:latest
    container_name: arkon-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://arkon:${DB_PASSWORD}@postgres:5432/arkon
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./uploads:/app/uploads
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - arkon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: arkon-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=arkon
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=arkon
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - arkon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arkon"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and WebSocket
  redis:
    image: redis:7-alpine
    container_name: arkon-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - arkon-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for advanced search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: arkon-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - arkon-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: arkon-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - arkon-network

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arkon-celery-worker
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://arkon:${DB_PASSWORD}@postgres:5432/arkon
    volumes:
      - ./uploads:/app/uploads
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
    networks:
      - arkon-network

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arkon-celery-beat
    restart: unless-stopped
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - arkon-network

  # Flower for Celery monitoring
  flower:
    image: mher/flower:latest
    container_name: arkon-flower
    restart: unless-stopped
    command: celery flower --broker=redis://redis:6379/0 --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - arkon-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: arkon-nginx
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - arkon-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: arkon-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - arkon-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: arkon-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - arkon-network

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: arkon-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - arkon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Jupyter for data analysis
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: arkon-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    ports:
      - "8888:8888"
    networks:
      - arkon-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local

networks:
  arkon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 